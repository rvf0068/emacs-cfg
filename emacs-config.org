#+title: Emacs Configuration
#+author:
#+options: toc:nil num:nil

* Emacs Configuration

This file documents my Emacs configuration. My goal is to keep it maintainable and extensible, addressing problems as they arise, sometimes with the help of AI.

** Keybindings Summary

Here is a summary of the custom keybindings defined in this configuration.

| Keybinding | Command                  | Scope / Mode         |
|------------+--------------------------+----------------------|
| =C-x k=      | =kill-current-buffer=      | Global               |
| =f2 f2=      | =indent-according-to-mode= | Global               |
| =f2 r=       | =recentf=                  | Global               |
| =super down= | =duplicate-line=           | Global               |
| =C-c m=      | =magit-status=             | Global               |
| =C-c a=      | =org-agenda=               | Global               |
| =C-c c=      | =org-capture=              | Global               |
| =C-c g=      | =gptel=                    | Global               |
| =<f5> d=     | =bms/org-roam-rg-search=   | Global               |
| =<f5> l=     | =consult-line=             | Global               |
| =<f5> r=     | =consult-ripgrep=          | Global               |
| =C-==        | =embark-act=               | Global               |
| =f7=         | =citar-open=               | Global               |
| =<f5> b=     | =citar-insert-bibtex=      | Global               |
| =<f8> f=     | =org-roam-node-find=       | Global               |
| =<f8> i=     | =org-roam-node-insert=     | Global               |
| =C-c r=      | =my/org-insert-smart-ref=  | =org-mode=             |
| =$=          | =math-delimiters-insert=   | =org-mode=, =LaTeX-mode= |
| =<f5> b=     | =bibretrieve=              | =bibtex-mode=          |
| =<f5> m=     | =mark-sexp=                | =bibtex-mode=          |
| =<f6> t=     | `thm` snippet            | =org-mode=             |
| =<f6> d=     | `def` snippet            | =org-mode=             |
| =<f6> c=     | `cor` snippet            | =org-mode=             |
| =<f6> l=     | `lem` snippet            | =org-mode=             |
| =<f6> e=     | `equ` snippet            | =org-mode=             |
| =<f6> f=     | `pf` snippet             | =org-mode=             |
| =<f6> p=     | `pro` snippet            | =org-mode=             |

** Personal Settings

Loads a separate =personal.org= file for private configurations (like API keys or machine-specific paths).

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
(if (file-exists-p
     (expand-file-name "personal.org" user-emacs-directory))
    (org-babel-load-file (expand-file-name "personal.org" user-emacs-directory)))
#+end_src

** General Emacs Settings

Core settings for Emacs behavior, keybindings, and hooks for fundamental modes.

#+begin_src emacs-lisp
(use-package emacs
  :bind
  ("C-x k" . kill-current-buffer)
  ([(f2) (f2)] . indent-according-to-mode)
  ([(f2) (r)] . recentf)
  ([(super down)] . (lambda () (interactive) (duplicate-line 1)))
  :custom
  (confirm-nonexistent-file-or-buffer nil)
  (frame-title-format "%b: %+%+ %f")
  (mouse-drag-copy-region t)
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . abbrev-mode)
  (text-mode . flyspell-mode)
  :init
  (global-visual-line-mode)
  (recentf-mode))
#+end_src

*** Dired

Dired is the built-in Emacs file manager, documented in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Emacs manual]]. This configuration enables =dired-x= for extra functionality and sets =dired-dwim-target= to make moving and copying files more intuitive.

#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :config
  (require 'dired-x)
  :custom
  (dired-dwim-target t))
#+end_src

** Fonts and Appearance

*** mixed-pitch

The [[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] package enables a combination of fixed-pitch and variable-pitch fonts in text buffers, which can significantly improve readability.
#+begin_src emacs-lisp
(use-package mixed-pitch
  :straight t
  :hook
  (text-mode . mixed-pitch-mode))
#+end_src

** LaTeX

This section configures packages for writing and managing LaTeX documents.

*** AUCTeX

[[https://www.gnu.org/software/auctex/][AUCTeX]] is a comprehensive environment for writing TeX and LaTeX files. The configuration below customizes environments (like =theorem= and =lemma=) and labels for =reftex= integration.
#+begin_src emacs-lisp
(use-package tex
  :straight auctex
  :mode ("\\.tikz\\'" . latex-mode)
  :init
  (defun my-latex-config ()
    (TeX-add-symbols '("deg"))
    (TeX-add-symbols '("emph" 1))
    (TeX-add-symbols '("ne"))
    (TeX-add-symbols '("to"))
    (LaTeX-add-environments '("definition" LaTeX-env-label)
                            '("theorem" LaTeX-env-label)
                            '("lemma" LaTeX-env-label)
                            '("corollary" LaTeX-env-label)
                            '("proposition" LaTeX-env-label)
                            '("problem" LaTeX-env-label)
                            '("remark" LaTeX-env-label)
                            '("example" LaTeX-env-label))
    (add-to-list 'LaTeX-label-alist '("definition" . "def:"))
    (add-to-list 'LaTeX-label-alist '("theorem" . "thm:"))
    (add-to-list 'LaTeX-label-alist '("lemma" . "lem:"))
    (add-to-list 'LaTeX-label-alist '("corollary" . "cor:"))
    (add-to-list 'LaTeX-label-alist '("proposition" . "prop:"))
    (add-to-list 'LaTeX-label-alist '("problem" . "prob:"))
    (add-to-list 'LaTeX-label-alist '("remark" . "rem:"))
    (add-to-list 'LaTeX-label-alist '("example" . "exa:"))
    (add-to-list 'reftex-label-alist '("definition" ?d "def:" "~\\ref{%s}" nil ("Definition" "definition")))
    (add-to-list 'reftex-label-alist '("theorem" ?h "thm:" "~\\ref{%s}" nil ("Theorem" "theorem")))
    (add-to-list 'reftex-label-alist '("lemma" ?l "lem:" "~\\ref{%s}" nil ("Lemma" "lemma")))
    (add-to-list 'reftex-label-alist '("corollary" ?c "cor:" "~\\ref{%s}" nil ("Corollary" "corollary")))
    (add-to-list 'reftex-label-alist '("proposition" ?p "prop:" "~\\ref{%s}" nil ("Proposition" "proposition")))
    (add-to-list 'reftex-label-alist '("problem" ?b "prob:" "~\\ref{%s}" nil ("Problem" "problem")))
    (add-to-list 'reftex-label-alist '("remark" ?r "rem:" "~\\ref{%s}" nil ("Remark" "remark")))
    (add-to-list 'reftex-label-alist '("example" ?e "exa:" "~\\ref{%s}" nil ("Example" "example"))))
  :custom
  (preview-scale-function 1.4)
  (reftex-plug-into-AUCTeX t)
  (reftex-use-external-file-finders t)
  (TeX-auto-save t)
  (TeX-electric-escape t)
  (TeX-insert-braces nil)
  (TeX-parse-self t)
  (TeX-save-query nil)
  :hook
  (LaTeX-mode . my-latex-config)
  (LaTeX-mode . cdlatex-mode)
  (LaTeX-mode . reftex-mode))
#+end_src

*** cdlatex

[[https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/][CDLaTeX]] is a minor mode for quickly inserting LaTeX environments and mathematical symbols in both LaTeX and Org buffers. It is particularly useful in both LaTeX and Org buffers. The =cdlatex-takeover-parenthesis= variable is customized to resolve a [[https://github.com/cdominik/cdlatex/issues/15#issuecomment-864529972][known issue]].
The following table summarizes the custom math symbol additions.

| Trigger Key | First Expansion | Second Expansion | Third Expansion     |
|-------------+-----------------+------------------+---------------------|
| =c=           | =\colon=          |                  |                     |
| =m=           | =\mu=             | =\mapsto=          |                     |
| =p=           | =\pi=             | =\varpi=           | =\perp=               |
| =o=           | =\omega=          | =\oplus=           |                     |
| =O=           | =\Omega=          | =\mathrm{Orb}=     |                     |
| =S=           | =\Sigma=          | =\mathrm{Stab}=    |                     |
| =T=           | =\bigtriangleup=  |                  |                     |
| ~-~           | =\cap=            | =\leftrightarrow=  | =\longleftrightarrow= |
| =.=           | =\ldots=          | =\cdots=           | =\cdot=               |
| =*=           | =\times=          | =\otimes=          |                     |
| =<=           | =\leq=            | =\langle=          | =\trianglelefteq=     |
| =>=           | =\geq=            | =\rangle=          | =\trianglerighteq=    |
| ~=~           | =\simeq=          | =\sim=             |                     |
| =[=           | =\subseteq=       |                  |                     |

#+begin_src emacs-lisp
(use-package cdlatex
  :straight t
  :custom
  (cdlatex-math-symbol-alist
   '(( ?c   ("\\colon"))
     ( ?m   ("\\mu" "\\mapsto"))
     ( ?p   ("\\pi" "\\varpi" "\\perp"))
     ( ?o   ("\\omega" "\\oplus"))
     ( ?O   ("\\Omega" "\\mathrm{Orb}"))
     ( ?S   ("\\Sigma" "\\mathrm{Stab}"))
     ( ?T   ("\\bigtriangleup"))
     ( ?-   ("\\cap" "\\leftrightarrow" "\\longleftrightarrow"))
     ( ?.   ("\\ldots" "\\cdots" "\\cdot"))
     ( ?*   ("\\times" "\\otimes"))
     ( ?<   ("\\leq" "\\langle" "\\trianglelefteq"))
     ( ?>   ("\\geq" "\\rangle" "\\trianglerighteq"))
     ( ?=   ("\\simeq" "\\sim"))
     ( ?\[  ("\\subseteq"))))
  (cdlatex-math-modify-alist
   '(( ?a "\\overrightarrow" nil t nil nil)
     ( ?k "\\mathfrak" nil t nil nil)
     ( ?B "\\mathbb"         nil t nil nil)))
  (cdlatex-command-alist
   '(("bin"  "Insert \\binom{}{}" "\\binom{?}{}" cdlatex-position-cursor nil nil t)
     ("norm" "Insert \\Vert \\Vert" "\\Vert ?\\Vert" cdlatex-position-cursor nil nil t)
     ("gen"  "Insert \\langle \\rangle" "\\langle ?\\rangle" cdlatex-position-cursor nil nil t)
     ("set"  "Insert a set" "\\{?\\mid \\}" cdlatex-position-cursor nil nil t)))
  (cdlatex-simplify-sub-super-scripts nil)
  (cdlatex-takeover-parenthesis nil))
#+end_src

*** math-delimiters

The [[https://github.com/oantolin/math-delimiters][math-delimiters]] package provides commands for inserting TeX/LaTeX math delimiters. It is configured to take over the =$= key in Org and LaTeX modes, unbinding it from =cdlatex-mode-map= where it would conflict.
#+begin_src emacs-lisp
(use-package math-delimiters
  :straight (:host github :repo "oantolin/math-delimiters")
  :after (org cdlatex)
  :bind (:map org-mode-map
              ("$" . math-delimiters-insert))
  :config
  ;; Unbind $ in cdlatex-mode-map (when cdlatex is loaded)
  (with-eval-after-load 'cdlatex
    (define-key cdlatex-mode-map "$" nil))
  ;; Bind $ in LaTeX-mode-map (when latex is loaded)
  (with-eval-after-load 'latex
    (define-key LaTeX-mode-map "$" #'math-delimiters-insert)))
#+end_src

** Org Mode

This section contains the configuration for [[https://orgmode.org][Org mode]], a powerful system for outlining, note-taking, project planning, and authoring.

This configuration loads a custom helper file, =cross-refs.el=, which defines functions to enable a smart cross-referencing system.
- =my/org-insert-smart-ref= (bound to =C-c r r=) intelligently guesses the type of reference to insert (e.g., `thm:`, `def:`) based on the preceding word.
- This system works with a custom set of Yasnippet snippets (bound to =<f6> <key>=) that insert theorem-like environments (see =yasnippet= section).
- The snippets use the helper function =my/org-snippet-get-unique-label= from =cross-refs.el= to prompt for a label and ensure it is not a duplicate before insertion.

#+begin_src emacs-lisp
(use-package org
  :demand t
  :bind
  ("C-c a" . org-agenda)
  ("C-c c" . org-capture)
  :bind (:map org-mode-map
              ("C-c r" . my/org-insert-smart-ref))
  :init
  (require 'org-habit)
  (require 'org-protocol)
  :config
  ;; Helper macro for backend-specific code
  (defmacro by-backend (&rest body)
    `(cl-case org-export-current-backend ,@body))

  ;; Cross references in org mode
  (require 'cross-refs)

  ;; GTD system and Inbox.org creation
  ;; Note: 'my-notes-directory' is set in personal.org
  (unless (file-exists-p
           (expand-file-name "Inbox.org" my-notes-directory))
    (write-region "" nil (expand-file-name "Inbox.org" my-notes-directory)))
  (unless (boundp 'org-capture-templates)
    (setq org-capture-templates nil))
  (defun rvf/set-gtd ()
    "Set agenda and templates for GTD"
    (add-to-list 'org-agenda-files
                 (expand-file-name "Inbox.org" my-notes-directory))
    (add-to-list 'org-capture-templates
                 `("i" "Inbox" entry
                   (file ,(expand-file-name "Inbox.org" my-notes-directory))
                   ,(concat "* TODO %?\n"
                            "/Entered on/ %U")))
    (add-to-list 'org-capture-templates
                 `("w" "web" entry
                   (file+headline ,(expand-file-name "Inbox.org" my-notes-directory) "Web")
                   "* %a\n\n%U\n%i%?")))
  (rvf/set-gtd)
  ;; Font scaling for better readability
  (set-face-attribute 'org-level-1 nil :height 1.5)
  (set-face-attribute 'org-level-2 nil :height 1.3)
  (set-face-attribute 'org-level-3 nil :height 1.2)
  (set-face-attribute 'org-level-4 nil :height 1.1)
  (set-face-attribute 'org-document-title nil :height 1.75)
  :custom
  ;; Note: 'my-bibliography' is set in personal.org
  (org-cite-global-bibliography `(,my-bibliography))
  (org-export-with-tags nil)
  (org-file-apps
   '((auto-mode . emacs)
     ("pdf" . "evince %s")))
  (org-hide-emphasis-markers t)
  (org-latex-compiler "xelatex")
  (org-log-done 'note)
  (org-return-follows-link t)
  (org-src-preserve-indentation t)
  (org-support-shift-select 'always)
  :hook
  (org-mode . turn-on-auto-revert-mode)
  (org-mode . org-cdlatex-mode)
  (org-babel-after-execute . org-redisplay-inline-images))
#+end_src

*** org-fragtog

The [[https://github.com/io12/org-fragtog][org-fragtog]] package enhances the experience of working with LaTeX in Org mode by automatically toggling fragment previews as the cursor moves in and out of them. The scale is increased for visibility.

#+begin_src emacs-lisp
(use-package org-fragtog
  :straight t
  :after org
  :custom
  (org-format-latex-header (concat org-format-latex-header "\n\\usepackage{lxfonts}\n\\usepackage{amsmath}"))
  (org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  :init
  (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src

*** org-roam

https://www.orgroam.com/

Org Roam is a note-taking tool for networked thought. It's configured to use the notes directory from =personal.org= and provides custom templates for literature notes and projects.

#+begin_src emacs-lisp
(use-package org-roam
  :straight t
  :after org
  :bind
  (("<f8> f" . org-roam-node-find))
  (("<f8> i" . org-roam-node-insert))
  :custom
  ;; Note: 'my-notes-directory' is set in personal.org
  (org-roam-directory my-notes-directory)
  (org-roam-completion-everywhere t)
  :init
  (org-roam-db-autosync-mode)
  :config
  (setq org-roam-capture-templates
        '(("d" "project" plain
           "\n* Goals\n%?\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
           :unnarrowed t
           :immediate-finish t)
        ("r" "literature note" plain
         "%?"
         :target
         (file+head
          "%(expand-file-name (or citar-org-roam-subdir \"\") org-roam-directory)/${citar-citekey}.org"
          "#+title: (${citar-date}) ${note-title}.\n\n#+created: %U\n#+last_modified: %U\n\n")
         :unnarrowed t))))
#+end_src

** Completion and Navigation

This section details the modern completion system composed of Vertico, Orderless, Consult, and Embark.

*** vertico

[[https://github.com/minad/vertico][Vertico]] provides a high-performance, vertical completion UI. It is configured to use =vertico-multiform-mode= to provide an Ido-like experience for file navigation.

#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :init
  (vertico-mode)
  :config
  ;; This enables per-category configurations for Vertico.
  (vertico-multiform-mode)
  :custom
  ;; This tells vertico-multiform-mode to apply the special
  ;; 'vertico-directory-map' to any completion category of type 'file'.
  (vertico-multiform-categories
   '((file (:keymap . vertico-directory-map)))))
#+end_src

*** orderless

[[https://github.com/oantolin/orderless][Orderless]] is a completion style that allows matching items by entering multiple patterns in any order.

#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** consult

[[https://github.com/minad/consult][Consult]] offers a suite of commands that enhance searching and navigation, such as =consult-line= and =consult-ripgrep=. A custom function, =bms/org-roam-rg-search=, is defined to search specifically within the Org notes directory (path set in =personal.org=).

#+begin_src emacs-lisp
(use-package consult
  :straight t
  :bind
  ("<f5> d" . bms/org-roam-rg-search)
  ("<f5> l" . consult-line)
  ("<f5> r" . consult-ripgrep)
  :init
  ;;; https://org-roam.discourse.group/t/using-consult-ripgrep-with-org-roam-for-searching-notes/1226
  (defun bms/org-roam-rg-search ()
    "Search org-roam directory using consult-ripgrep. With live-preview."
    (interactive)
    (let ((consult-ripgrep-command
	   "rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS"))
      ;; Note: 'my-notes-directory' is set in personal.org
      (consult-ripgrep my-notes-directory))))
#+end_src

*** embark

[[https://github.com/oantolin/embark][Embark]] provides contextual actions for the item-at-point or for completion candidates. A custom Embark action, =my-embark-org-insert-link=, is defined to insert an Org-mode link to a file, bound to =L= in the `embark-file-map`.

#+begin_src emacs-lisp
(use-package embark
  :straight t
  :bind
  (("C-=" . embark-act))
  :config
  ;; Define the custom action
  (defun my-embark-org-insert-link (path)
    "An embark action to insert an org-mode link to a file.
The PATH is supplied automatically by Embark.
The description is set to the file name without its extension."
    (let ((description (file-name-sans-extension (file-name-nondirectory path))))
      ;; Manually format and insert the link string to avoid
      ;; org-insert-link version compatibility issues.
      (insert (format "[[file:%s][%s]]" path description))))

  ;; Add the keybinding to Embark's file map
  (define-key embark-file-map (kbd "L") #'my-embark-org-insert-link))

(use-package embark-consult
  :straight t
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** corfu

[[https://github.com/minad/corfu][Corfu]] (COmpletion in Region FUnction) provides an in-buffer completion UI, which is set to activate automatically.

#+begin_src emacs-lisp
(use-package corfu
  :straight t
  :custom
  (corfu-auto t)
  (corfu-auto-prefix 4)
  :init
  (global-corfu-mode))
#+end_src

*** cape

[[https://github.com/minad/cape][Cape]] (Completion At Point Extensions) provides backends for Corfu, allowing it to complete words from the current buffer (=cape-dabbrev=). Note that in order to use a non-English dictionary, it is useful a local variable like =cape-dict-file: "/usr/share/dict/spanish"=.

#+begin_src emacs-lisp
(use-package cape
  :straight t
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;(add-to-list 'completion-at-point-functions #'cape-dict)
  )
#+end_src

*** yasnippet

[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system for Emacs, used here to insert environments for academic writing.
- This configuration is linked to the =cross-refs.el= helper library.
- Custom snippets for `thm`, `def`, `lem`, `cor`, `pro`, `pf`, and `equ` are defined in the `~/snippets/org-mode` directory.
- These snippets are bound to =<f6> <key>= (e.g., =<f6> t= for `thm`).
- When expanded, they call the function =my/org-snippet-get-unique-label= to prompt for a unique label, preventing duplicates.

#+begin_src emacs-lisp
(use-package yasnippet
  :straight t
  :config
  (yas-global-mode)
  :custom
  (yas-indent-line 'fixed))
#+end_src

** Development and AI

*** magit

[[https://magit.vc][Magit]] is a complete text-based user interface for Git inside Emacs.
#+begin_src emacs-lisp
(use-package magit
  :straight t
  :bind ("C-c m" . magit-status))
#+end_src

*** gptel

[[https://github.com/karthink/gptel][GPTel]] provides an interface to Large Language Models (LLMs) directly within Emacs. It is configured here, but the API key is set in the private =personal.org= file.
#+begin_src emacs-lisp
(use-package gptel
  :straight t
  :defer t
  :custom
  (gptel-default-mode 'org-mode)
  (gptel-include-reasoning nil)
  :bind
  ("C-c g" . gptel))
#+end_src

*** gptel-magit

This [[https://github.com/ragnard/gptel-magit][gptel-magit]] package integrates GPTel with Magit, allowing for the automatic generation of Git commit messages based on staged changes.
#+begin_src emacs-lisp
(use-package gptel-magit
  :straight t
  :hook (magit-mode . gptel-magit-install))
#+end_src

*** pdf-tools

[[https://github.com/vedang/pdf-tools][PDF Tools]] is a replacement for DocView for PDF files, which renders pages on-demand and stores them in memory.
#+begin_src emacs-lisp
(use-package pdf-tools
  :if window-system
  :straight t
  :config
  (pdf-tools-install))
#+end_src

*** smartparens

[[https://github.com/Fuco1/smartparens][Smartparens]] is a minor mode for managing paired delimiters. It is configured to ignore =$= (handled by =math-delimiters=) and to correctly handle Org mode's verbatim (=) and math (|) delimiters.

#+begin_src emacs-lisp
(use-package smartparens
  :straight t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)

  ;; Remove $ from smartparens's global control.
  (sp-pair "$" nil :actions :rem)

  ;; For org-mode verbatim text, e.g., =code=
  (sp-local-pair 'org-mode "=" "="
		 :unless '(sp-point-after-word-p sp-in-math-p)
		 :post-handlers '(("[d1]" "SPC")))

  ;; For org-mode math, e.g., |x|
  (sp-local-pair 'org-mode "|" "|"
		 :when '(sp-in-math-p)))
#+end_src

** Academic and Research

*** citar

[[https://github.com/emacs-citar/citar][Citar]] is a package for finding and acting on bibliographic references. It is configured to use the bibliography and notes paths defined in =personal.org=.

#+begin_src emacs-lisp
(use-package citar
  :straight t
  :bind
  ([(f7)] . citar-open)
  ("<f5> b" . citar-insert-bibtex)
  :custom
  ;; Note: 'my-bibliography', 'my-library-path', and 'my-notes-directory'
  ;; are all set in personal.org
  (citar-bibliography my-bibliography)
  (citar-library-paths `(,my-library-path))
  (citar-notes-paths `(,my-notes-directory)))
#+end_src

**** citar-org-roam

[[https://github.com/emacs-citar/citar-org-roam][Citar-org-roam]] integrates Citar with Org Roam. It is set to use the "r" template key from the Org Roam configuration.

#+begin_src emacs-lisp
(use-package citar-org-roam
  :straight t
  :after (citar org-roam)
  :config
  (citar-org-roam-mode)
  (setq citar-org-roam-note-title-template "${title} by ${author}")
  (setq citar-org-roam-capture-template-key "r"))
#+end_src

*** bibretrieve

[[https://github.com/pzorin/bibretrieve][Bibretrieve]] is a library for searching and downloading BibTeX entries. It is configured to use the "mrl" backend, as the default (Zentralblatt MATH) appears to be down.

#+begin_src emacs-lisp
(use-package bibretrieve
  :straight t
  :custom
  (bibretrieve-backends '(("mrl" . 10))))
#+end_src

*** bibtex

=bibtex-mode= is built-in and configured to use =bibretrieve=. A custom function, =bibtex-generate-autokey=, is defined to format BibTeX keys as =year-author-title=.

#+begin_src emacs-lisp
(use-package bibtex
  :straight (:type built-in)
  :demand t
  :bind (:map bibtex-mode-map
	      ("<f5> b" . bibretrieve)
	      ("<f5> m" . mark-sexp))
  :custom
  (bibtex-autokey-year-title-separator "-")
  (bibtex-autokey-year-length 4)
  (bibtex-autokey-names nil)
  (bibtex-autokey-name-separator "-")
  (bibtex-autokey-name-year-separator "-")
  (bibtex-autokey-titleword-separator "-")
  (bibtex-autokey-titleword-length "All")
  (bibtex-autokey-titlewords "All")
  (bibtex-autokey-titleword-ignore "")
  :config
  (defun bibtex-generate-autokey ()
    (let* ((names (bibtex-autokey-get-names))
           (year (bibtex-autokey-get-year))
           (title (bibtex-autokey-get-title))
           (autokey (concat year
                            (unless (or (equal names "")
					(equal year ""))
                              bibtex-autokey-name-year-separator)
                            names
                            (unless (or (and (equal names "")
                                             (equal year ""))
					(equal title ""))
                              bibtex-autokey-year-title-separator)
                            title)))
      autokey)))
#+end_src

** Python

*** jupyter

[[https://github.com/emacs-jupyter/jupyter][Jupyter]] integration for Emacs. A custom workaround is implemented to handle a login error. Also, to make it work in my computer, I had two manually delete the two copies of the file =emacs-zmq.so= inside the folder =/straight/build/zmq=. Then, the first time that one uses =emacs-jupyter=, one will be asked if one wants to search for a binary distribution. One should answer "no". This would case a compilation to happen locally.

#+begin_src emacs-lisp
(use-package jupyter
  :if (executable-find "jupyter")
  :straight t
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((latex . t)
     (python . t)
     (jupyter . t))))

;; see https://github.com/emacs-jupyter/jupyter/issues/500#issuecomment-2323985951
(defun my-jupyter-api-http-request--ignore-login-error-a
    (func url endpoint method &rest data)
  (cond
   ((member endpoint '("login"))
    (ignore-error (jupyter-api-http-error)
      (apply func url endpoint method data)))
   (:else
    (apply func url endpoint method data))))
(advice-add
 #'jupyter-api-http-request
 :around #'my-jupyter-api-http-request--ignore-login-error-a)
#+end_src

*** ox-ipynb

[[https://github.com/jkitchin/ox-ipynb][ox-ipynb]] provides an Org mode exporter for creating Jupyter notebooks.

#+begin_src emacs-lisp
(use-package ox-ipynb
  :straight
  (:host github :repo "jkitchin/ox-ipynb"))
#+end_src

*** eglot

=eglot= is the built-in Emacs LSP client. It is configured to auto-start for Python mode using =pylsp=.

#+begin_src emacs-lisp
(use-package eglot
  :straight (:type built-in)
  :hook (python-mode . eglot-ensure)
  :config
  (add-to-list 'eglot-server-programs '(python-mode . ("pylsp"))))
#+end_src
