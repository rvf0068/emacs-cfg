* Emacs Configuration

This file documents my Emacs configuration. My goal is to keep it maintainable and extensible, addressing problems as they arise, sometimes with the help of AI.

** Personal Settings

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
(if (file-exists-p
     (expand-file-name "personal.org" user-emacs-directory))
    (org-babel-load-file (expand-file-name "personal.org" user-emacs-directory)))
#+end_src

** General Emacs Settings

#+begin_src emacs-lisp
(use-package emacs
  :bind
  ("C-x k" . kill-current-buffer)
  ([(f2) (f2)] . indent-according-to-mode)
  ([(f2) (r)] . recentf)
  ([(super down)] . (lambda () (interactive) (duplicate-line 1)))
  :custom
  (confirm-nonexistent-file-or-buffer nil)
  (frame-title-format "%b: %+%+ %f")
  (mouse-drag-copy-region t)
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . abbrev-mode)
  (text-mode . flyspell-mode)
  :init
  (global-visual-line-mode)
  (recentf-mode))
#+end_src

*** dired

https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html

#+begin_quote
Dired makes an Emacs buffer containing a listing of a directory, and optionally some of its subdirectories as well. You can use the normal Emacs commands to move around in this buffer, and special Dired commands to operate on the listed files.
#+end_quote

#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :config
  (require 'dired-x)
  :custom
  (dired-dwim-target t))
#+end_src

** Fonts and Appearance

Enable =mixed-pitch-mode= in text buffers to combine fixed-pitch and variable-pitch fonts for improved readability.
See [[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch on GitLab]].

#+begin_src emacs-lisp
(use-package mixed-pitch
  :straight t
  :hook
  (text-mode . mixed-pitch-mode))
#+end_src

** LaTeX

*** cdlatex

CDLaTeX is a minor mode for fast insertion of environment templates and math in LaTeX and Org buffers.
See [[https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/][cdlatex homepage]].

The custom settings in =cdlatex-math-symbol-alist= are useful for both LaTeX and Org buffers.
I needed to customize =cdlatex-takeover-parenthesis= (see [[https://github.com/cdominik/cdlatex/issues/15#issuecomment-864529972][this issue]]).

#+begin_src emacs-lisp
(use-package cdlatex
  :straight t
  :custom
  (cdlatex-math-symbol-alist
   '(( ?c   ("\\colon"))
     ( ?m   ("\\mu" "\\mapsto"))
     ( ?p   ("\\pi" "\\varpi" "\\perp"))
     ( ?o   ("\\omega" "\\oplus"))
     ( ?O   ("\\Omega" "\\mathrm{Orb}"))
     ( ?S   ("\\Sigma" "\\mathrm{Stab}"))
     ( ?T   ("\\bigtriangleup"))
     ( ?-   ("\\cap" "\\leftrightarrow" "\\longleftrightarrow"))
     ( ?.   ("\\ldots" "\\cdots" "\\cdot"))
     ( ?*   ("\\times" "\\otimes"))
     ( ?<   ("\\leq" "\\langle" "\\trianglelefteq"))
     ( ?>   ("\\geq" "\\rangle" "\\trianglerighteq"))
     ( ?=   ("\\simeq" "\\sim"))
     ( ?\[  ("\\subseteq"))))
  (cdlatex-math-modify-alist
   '(( ?a "\\overrightarrow" nil t nil nil)
     ( ?k "\\mathfrak" nil t nil nil)
     ( ?B "\\mathbb"         nil t nil nil)))
  (cdlatex-command-alist
   '(("bin"  "Insert \\binom{}{}"
      "\\binom{?}{}"       cdlatex-position-cursor nil nil t)
     ("norm" "Insert \\Vert \\Vert"
      "\\Vert ?\\Vert"     cdlatex-position-cursor nil nil t)
     ("gen"  "Insert \\langle \\rangle"
      "\\langle ?\\rangle" cdlatex-position-cursor nil nil t)
     ("set"  "Insert a set"
      "\\{?\\mid \\}"      cdlatex-position-cursor nil nil t)))
  (cdlatex-simplify-sub-super-scripts nil)
  (cdlatex-takeover-parenthesis nil))
#+end_src

*** auctex

AUCTeX is an extensible package for writing and formatting TeX files in Emacs.
See [[https://www.gnu.org/software/auctex/][AUCTeX homepage]].

#+begin_src emacs-lisp
(use-package tex
  :straight auctex
  :mode ("\\.tikz\\'" . latex-mode)
  :init
  (defun my-latex-config ()
    (TeX-add-symbols '("deg"))
    (TeX-add-symbols '("emph" 1))
    (TeX-add-symbols '("ne"))
    (TeX-add-symbols '("to"))
    (LaTeX-add-environments '("definition" LaTeX-env-label)
                            '("theorem" LaTeX-env-label)
                            '("lemma" LaTeX-env-label)
                            '("corollary" LaTeX-env-label)
                            '("proposition" LaTeX-env-label)
                            '("problem" LaTeX-env-label)
                            '("remark" LaTeX-env-label)
                            '("example" LaTeX-env-label))
    (add-to-list 'LaTeX-label-alist '("definition" . "def:"))
    (add-to-list 'LaTeX-label-alist '("theorem" . "thm:"))
    (add-to-list 'LaTeX-label-alist '("lemma" . "lem:"))
    (add-to-list 'LaTeX-label-alist '("corollary" . "cor:"))
    (add-to-list 'LaTeX-label-alist '("proposition" . "prop:"))
    (add-to-list 'LaTeX-label-alist '("problem" . "prob:"))
    (add-to-list 'LaTeX-label-alist '("remark" . "rem:"))
    (add-to-list 'LaTeX-label-alist '("example" . "exa:"))
    (add-to-list 'reftex-label-alist '("definition" ?d "def:" "~\\ref{%s}" nil ("Definition" "definition")))
    (add-to-list 'reftex-label-alist '("theorem" ?h "thm:" "~\\ref{%s}" nil ("Theorem" "theorem")))
    (add-to-list 'reftex-label-alist '("lemma" ?l "lem:" "~\\ref{%s}" nil ("Lemma" "lemma")))
    (add-to-list 'reftex-label-alist '("corollary" ?c "cor:" "~\\ref{%s}" nil ("Corollary" "corollary")))
    (add-to-list 'reftex-label-alist '("proposition" ?p "prop:" "~\\ref{%s}" nil ("Proposition" "proposition")))
    (add-to-list 'reftex-label-alist '("problem" ?b "prob:" "~\\ref{%s}" nil ("Problem" "problem")))
    (add-to-list 'reftex-label-alist '("remark" ?r "rem:" "~\\ref{%s}" nil ("Remark" "remark")))
    (add-to-list 'reftex-label-alist '("example" ?e "exa:" "~\\ref{%s}" nil ("Example" "example"))))
  :custom
  (preview-scale-function 1.4)
  (reftex-plug-into-AUCTeX t)
  (reftex-use-external-file-finders t)
  (TeX-auto-save t)
  (TeX-electric-escape t)
  (TeX-insert-braces nil)
  (TeX-parse-self t)
  (TeX-save-query nil)
  :hook
  (LaTeX-mode . my-latex-config)
  (LaTeX-mode . cdlatex-mode)
  (LaTeX-mode . reftex-mode))
#+end_src

** Magit

Magit is a complete text-based user interface to Git inside Emacs.
See [[https://magit.vc][Magit homepage]].

#+begin_src emacs-lisp
(use-package magit
  :straight t
  :bind ("C-c m" . magit-status))
#+end_src

** Org Mode

I set =org-src-preserve-indentation= to =t= to prevent source block indentation from being changed after editing.

#+begin_src emacs-lisp
(use-package org
  :demand t
  :bind
  ("C-c a" . org-agenda)
  ("C-c c" . org-capture)
  :init
  (require 'org-habit)
  (require 'org-protocol)
  :config
  ;; Helper macro for backend-specific code
  (defmacro by-backend (&rest body)
    `(cl-case org-export-current-backend ,@body))
  ;; GTD system and Inbox.org creation
  (unless (file-exists-p
           (expand-file-name "Inbox.org" my-notes-directory))
    (write-region "" nil (expand-file-name "Inbox.org" my-notes-directory)))
  (unless (boundp 'org-capture-templates)
    (setq org-capture-templates nil))
  (defun rvf/set-gtd ()
    "Set agenda and templates for GTD"
    (add-to-list 'org-agenda-files
                 (expand-file-name "Inbox.org" my-notes-directory))
    (add-to-list 'org-capture-templates
                 `("i" "Inbox" entry
                   (file ,(expand-file-name "Inbox.org" my-notes-directory))
                   ,(concat "* TODO %?\n"
                            "/Entered on/ %U")))
    (add-to-list 'org-capture-templates
                 `("w" "web" entry
                   (file+headline ,(expand-file-name "Inbox.org" my-notes-directory) "Web")
                   "* %a\n\n%U\n%i%?")))
  (rvf/set-gtd)
  (defun my-org-mode-hook ()
    (turn-on-auto-revert-mode)
    (turn-on-org-cdlatex))
  ;; Font scaling for better readability
  (set-face-attribute 'org-level-1 nil :height 1.5)
  (set-face-attribute 'org-level-2 nil :height 1.3)
  (set-face-attribute 'org-level-3 nil :height 1.2)
  (set-face-attribute 'org-level-4 nil :height 1.1)
  (set-face-attribute 'org-document-title nil :height 1.75)
  :custom
  (org-cite-global-bibliography `(,my-bibliography))
  (org-export-with-tags nil)
  (org-file-apps
   '((auto-mode . emacs)
     ("pdf" . "evince %s")))
  (org-hide-emphasis-markers t)
  (org-latex-compiler "xelatex")
  (org-log-done 'note)
  (org-return-follows-link t)
  (org-src-preserve-indentation t)
  (org-support-shift-select 'always)
  :hook
  (org-mode . my-org-mode-hook)
  (org-babel-after-execute . org-redisplay-inline-images))
#+end_src

*** org-fragtog

=org-fragtog= automatically toggles Org mode LaTeX fragment previews as the cursor enters and exits them.
See [[https://github.com/io12/org-fragtog][org-fragtog on GitHub]].

By default, previews are too small, so I increase the scale.

#+begin_src emacs-lisp
(use-package org-fragtog
  :straight t
  :after org
  :custom
  (org-format-latex-header (concat org-format-latex-header "\n\\usepackage{lxfonts}\n\\usepackage{amsmath}"))
  (org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  :init
  (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src

** AI

*** gptel

I set =gptel-include-reasoning= to =nil= so that =gptel-magit= works as expected.

#+begin_src emacs-lisp
(use-package gptel
  :straight t
  :defer t
  :custom
  (gptel-default-mode 'org-mode)
  (gptel-include-reasoning nil)
  :bind
  ("C-c g" . gptel))
#+end_src

*** gptel-magit

This package integrates GPTel with Magit to generate commit messages using LLMs.
See [[https://github.com/ragnard/gptel-magit][gptel-magit on GitHub]].

#+begin_src emacs-lisp
(use-package gptel-magit
  :straight t
  :hook (magit-mode . gptel-magit-install))
#+end_src

** Math

*** math-delimiters

The =math-delimiters= package provides commands to easily insert TeX/LaTeX math delimiters.
See [[https://github.com/oantolin/math-delimiters][math-delimiters on GitHub]].

#+begin_src emacs-lisp
(use-package math-delimiters
  :straight (:host github :repo "oantolin/math-delimiters")
  :after (org cdlatex)
  :bind (:map org-mode-map
              ("$" . math-delimiters-insert))
  :config
  ;; Unbind $ in cdlatex-mode-map (when cdlatex is loaded)
  (with-eval-after-load 'cdlatex
    (define-key cdlatex-mode-map "$" nil))
  ;; Bind $ in LaTeX-mode-map (when latex is loaded)
  (with-eval-after-load 'latex
    (define-key LaTeX-mode-map "$" #'math-delimiters-insert)))
#+end_src
** Misc Tools
*** embark

https://github.com/oantolin/embark

#+begin_quote
Emacs Mini-Buffer Actions Rooted in Keymaps
#+end_quote

#+begin_src emacs-lisp
(use-package embark
  :straight t
  :bind
  (("C-=" . embark-act))
  :custom
  (use-package embark-consult))
#+end_src

*** citar

https://github.com/emacs-citar/citar

#+begin_quote
Emacs package to quickly find and act on bibliographic references, and edit org, markdown, and latex academic documents.
#+end_quote

- Inserting a bibtex entry to a bibtex file: run =M-x citar-open=, then select the entry, then run =C-==, (embark-act) and choose.

- To convert a bibliography note made with org-roam-bibtex to use with citar, one should replace, say, the =cite:= with =@=, so that for example =:ROAM_REFS: cite:1962-lor= becomes =:ROAM_REFS: @1962-lor=.

#+begin_src emacs-lisp
(use-package citar
  :straight t
  :bind
  ([(f7)] . citar-open)
  ("<f5> b" . citar-insert-bibtex)
  :custom
  (citar-bibliography my-bibliography)
  (citar-library-paths `(,my-library-path))
  (citar-notes-paths `(,my-notes-directory)))
#+end_src

*** vertico

https://github.com/minad/vertico

It seems that =citar-open= is not so useful without =vertico=. And this is not so useful without =orderless=.

I have configured =vertico= to behave like =ido= when doing =C-x C-f=.

#+begin_quote
vertico.el - VERTical Interactive COmpletion
#+end_quote

#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :init
  (vertico-mode)
  :config
  ;; This enables per-category configurations for Vertico.
  (vertico-multiform-mode)
  :custom
  ;; This tells vertico-multiform-mode to apply the special
  ;; 'vertico-directory-map' to any completion category of type 'file'.
  (vertico-multiform-categories
   '((file (:keymap . vertico-directory-map)))))
#+end_src

*** orderless

https://github.com/oantolin/orderless

#+begin_quote
Emacs completion style that matches multiple regexps in any order
#+end_quote

#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

