#+title: Emacs Configuration
#+author:
#+options: toc:nil num:nil

* Emacs Configuration

This file documents my Emacs configuration. My goal is to keep it maintainable and extensible, addressing problems as they arise, sometimes with the help of AI.

** Keybindings Summary

Here is a summary of the custom keybindings defined in this configuration.

| Keybinding | Command                  | Scope / Mode         |
|------------+--------------------------+----------------------|
| =C-x k=      | =kill-current-buffer=      | Global               |
| =f2 f2=      | =indent-according-to-mode= | Global               |
| =f2 r=       | =recentf=                  | Global               |
| =super down= | =duplicate-line=           | Global               |
| =C-c m=      | =magit-status=             | Global               |
| =C-c a=      | =org-agenda=               | Global               |
| =C-c c=      | =org-capture=              | Global               |
| =C-c g=      | =gptel=                    | Global               |
| =<f5> d=     | =bms/org-roam-rg-search=   | Global               |
| =<f5> l=     | =consult-line=             | Global               |
| =<f5> r=     | =consult-ripgrep=          | Global               |
| =C-==        | =embark-act=               | Global               |
| =f7=         | =citar-open=               | Global               |
| =<f5> b=     | =citar-insert-bibtex=      | Global               |
| =$=          | =math-delimiters-insert=   | =org-mode=, =LaTeX-mode= |

** Personal Settings

Loads a separate =personal.org= file for private configurations.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
(if (file-exists-p
     (expand-file-name "personal.org" user-emacs-directory))
    (org-babel-load-file (expand-file-name "personal.org" user-emacs-directory)))
#+end_src

** General Emacs Settings

Core settings for Emacs behavior, keybindings, and hooks for fundamental modes.

#+begin_src emacs-lisp
(use-package emacs
  :bind
  ("C-x k" . kill-current-buffer)
  ([(f2) (f2)] . indent-according-to-mode)
  ([(f2) (r)] . recentf)
  ([(super down)] . (lambda () (interactive) (duplicate-line 1)))
  :custom
  (confirm-nonexistent-file-or-buffer nil)
  (frame-title-format "%b: %+%+ %f")
  (mouse-drag-copy-region t)
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . abbrev-mode)
  (text-mode . flyspell-mode)
  :init
  (global-visual-line-mode)
  (recentf-mode))
#+end_src

*** Dired

Dired is the built-in Emacs file manager, documented in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Emacs manual]]. It provides an interactive buffer where you can act on files and directories. This configuration enables =dired-x=, which provides extra functionality, and sets =dired-dwim-target= to make moving and copying files more intuitive.

#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :config
  (require 'dired-x)
  :custom
  (dired-dwim-target t))
#+end_src

** Fonts and Appearance

*** mixed-pitch

The [[https://gitlab.com/jabranham/mixed-pitch][mixed-pitch]] package enables a combination of fixed-pitch and variable-pitch fonts in text buffers, which can significantly improve readability.

#+begin_src emacs-lisp
(use-package mixed-pitch
  :straight t
  :hook
  (text-mode . mixed-pitch-mode))
#+end_src

** LaTeX

This section configures packages for writing and managing LaTeX documents.

*** AUCTeX

[[https://www.gnu.org/software/auctex/][AUCTeX]] is a comprehensive and extensible environment for writing and formatting TeX and LaTeX files in Emacs. The configuration below customizes environments and labels for =reftex= integration.

#+begin_src emacs-lisp
(use-package tex
  :straight auctex
  :mode ("\\.tikz\\'" . latex-mode)
  :init
  (defun my-latex-config ()
    (TeX-add-symbols '("deg"))
    (TeX-add-symbols '("emph" 1))
    (TeX-add-symbols '("ne"))
    (TeX-add-symbols '("to"))
    (LaTeX-add-environments '("definition" LaTeX-env-label)
                            '("theorem" LaTeX-env-label)
                            '("lemma" LaTeX-env-label)
                            '("corollary" LaTeX-env-label)
                            '("proposition" LaTeX-env-label)
                            '("problem" LaTeX-env-label)
                            '("remark" LaTeX-env-label)
                            '("example" LaTeX-env-label))
    (add-to-list 'LaTeX-label-alist '("definition" . "def:"))
    (add-to-list 'LaTeX-label-alist '("theorem" . "thm:"))
    (add-to-list 'LaTeX-label-alist '("lemma" . "lem:"))
    (add-to-list 'LaTeX-label-alist '("corollary" . "cor:"))
    (add-to-list 'LaTeX-label-alist '("proposition" . "prop:"))
    (add-to-list 'LaTeX-label-alist '("problem" . "prob:"))
    (add-to-list 'LaTeX-label-alist '("remark" . "rem:"))
    (add-to-list 'LaTeX-label-alist '("example" . "exa:"))
    (add-to-list 'reftex-label-alist '("definition" ?d "def:" "~\\ref{%s}" nil ("Definition" "definition")))
    (add-to-list 'reftex-label-alist '("theorem" ?h "thm:" "~\\ref{%s}" nil ("Theorem" "theorem")))
    (add-to-list 'reftex-label-alist '("lemma" ?l "lem:" "~\\ref{%s}" nil ("Lemma" "lemma")))
    (add-to-list 'reftex-label-alist '("corollary" ?c "cor:" "~\\ref{%s}" nil ("Corollary" "corollary")))
    (add-to-list 'reftex-label-alist '("proposition" ?p "prop:" "~\\ref{%s}" nil ("Proposition" "proposition")))
    (add-to-list 'reftex-label-alist '("problem" ?b "prob:" "~\\ref{%s}" nil ("Problem" "problem")))
    (add-to-list 'reftex-label-alist '("remark" ?r "rem:" "~\\ref{%s}" nil ("Remark" "remark")))
    (add-to-list 'reftex-label-alist '("example" ?e "exa:" "~\\ref{%s}" nil ("Example" "example"))))
  :custom
  (preview-scale-function 1.4)
  (reftex-plug-into-AUCTeX t)
  (reftex-use-external-file-finders t)
  (TeX-auto-save t)
  (TeX-electric-escape t)
  (TeX-insert-braces nil)
  (TeX-parse-self t)
  (TeX-save-query nil)
  :hook
  (LaTeX-mode . my-latex-config)
  (LaTeX-mode . cdlatex-mode)
  (LaTeX-mode . reftex-mode))
#+end_src

*** cdlatex

See the [[https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/][cdlatex homepage]]. CDLaTeX is a minor mode for quickly inserting LaTeX environments and mathematical symbols. It is particularly useful in both LaTeX and Org buffers. The =cdlatex-takeover-parenthesis= variable is customized to resolve a [[https://github.com/cdominik/cdlatex/issues/15#issuecomment-864529972][known issue]].

The following table summarizes the custom math symbol additions.

| Trigger Key | First Expansion | Second Expansion | Third Expansion     |
|-------------+-----------------+------------------+---------------------|
| =c=           | =\colon=          |                  |                     |
| =m=           | =\mu=             | =\mapsto=          |                     |
| =p=           | =\pi=             | =\varpi=           | =\perp=               |
| =o=           | =\omega=          | =\oplus=           |                     |
| =O=           | =\Omega=          | =\mathrm{Orb}=     |                     |
| =S=           | =\Sigma=          | =\mathrm{Stab}=    |                     |
| =T=           | =\bigtriangleup=  |                  |                     |
| =-=           | =\cap=            | =\leftrightarrow=  | =\longleftrightarrow= |
| =.=           | =\ldots=          | =\cdots=           | =\cdot=               |
| =*=           | =\times=          | =\otimes=          |                     |
| =<=           | =\leq=            | =\langle=          | =\trianglelefteq=     |
| =>=           | =\geq=            | =\rangle=          | =\trianglerighteq=    |
| ===           | =\simeq=          | =\sim=             |                     |
| =[=           | =\subseteq=       |                  |                     |

#+begin_src emacs-lisp
(use-package cdlatex
  :straight t
  :custom
  (cdlatex-math-symbol-alist
   '(( ?c   ("\\colon"))
     ( ?m   ("\\mu" "\\mapsto"))
     ( ?p   ("\\pi" "\\varpi" "\\perp"))
     ( ?o   ("\\omega" "\\oplus"))
     ( ?O   ("\\Omega" "\\mathrm{Orb}"))
     ( ?S   ("\\Sigma" "\\mathrm{Stab}"))
     ( ?T   ("\\bigtriangleup"))
     ( ?-   ("\\cap" "\\leftrightarrow" "\\longleftrightarrow"))
     ( ?.   ("\\ldots" "\\cdots" "\\cdot"))
     ( ?*   ("\\times" "\\otimes"))
     ( ?<   ("\\leq" "\\langle" "\\trianglelefteq"))
     ( ?>   ("\\geq" "\\rangle" "\\trianglerighteq"))
     ( ?=   ("\\simeq" "\\sim"))
     ( ?\[  ("\\subseteq"))))
  (cdlatex-math-modify-alist
   '(( ?a "\\overrightarrow" nil t nil nil)
     ( ?k "\\mathfrak" nil t nil nil)
     ( ?B "\\mathbb"         nil t nil nil)))
  (cdlatex-command-alist
   '(("bin"  "Insert \\binom{}{}" "\\binom{?}{}" cdlatex-position-cursor nil nil t)
     ("norm" "Insert \\Vert \\Vert" "\\Vert ?\\Vert" cdlatex-position-cursor nil nil t)
     ("gen"  "Insert \\langle \\rangle" "\\langle ?\\rangle" cdlatex-position-cursor nil nil t)
     ("set"  "Insert a set" "\\{?\\mid \\}" cdlatex-position-cursor nil nil t)))
  (cdlatex-simplify-sub-super-scripts nil)
  (cdlatex-takeover-parenthesis nil))
#+end_src

*** math-delimiters

The [[https://github.com/oantolin/math-delimiters][math-delimiters]] package provides convenient commands for inserting TeX/LaTeX math delimiters like parentheses and brackets. It is configured to take over the =$= key in both Org and LaTeX modes.

#+begin_src emacs-lisp
(use-package math-delimiters
  :straight (:host github :repo "oantolin/math-delimiters")
  :after (org cdlatex)
  :bind (:map org-mode-map
              ("$" . math-delimiters-insert))
  :config
  ;; Unbind $ in cdlatex-mode-map (when cdlatex is loaded)
  (with-eval-after-load 'cdlatex
    (define-key cdlatex-mode-map "$" nil))
  ;; Bind $ in LaTeX-mode-map (when latex is loaded)
  (with-eval-after-load 'latex
    (define-key LaTeX-mode-map "$" #'math-delimiters-insert)))
#+end_src

** Org Mode

This section contains the configuration for Org mode, a powerful system for outlining, note-taking, project planning, and authoring.

#+begin_src emacs-lisp
(use-package org
  :demand t
  :bind
  ("C-c a" . org-agenda)
  ("C-c c" . org-capture)
  :init
  (require 'org-habit)
  (require 'org-protocol)
  :config
  ;; Helper macro for backend-specific code
  (defmacro by-backend (&rest body)
    `(cl-case org-export-current-backend ,@body))
  ;; GTD system and Inbox.org creation
  (unless (file-exists-p
           (expand-file-name "Inbox.org" my-notes-directory))
    (write-region "" nil (expand-file-name "Inbox.org" my-notes-directory)))
  (unless (boundp 'org-capture-templates)
    (setq org-capture-templates nil))
  (defun rvf/set-gtd ()
    "Set agenda and templates for GTD"
    (add-to-list 'org-agenda-files
                 (expand-file-name "Inbox.org" my-notes-directory))
    (add-to-list 'org-capture-templates
                 `("i" "Inbox" entry
                   (file ,(expand-file-name "Inbox.org" my-notes-directory))
                   ,(concat "* TODO %?\n"
                            "/Entered on/ %U")))
    (add-to-list 'org-capture-templates
                 `("w" "web" entry
                   (file+headline ,(expand-file-name "Inbox.org" my-notes-directory) "Web")
                   "* %a\n\n%U\n%i%?")))
  (rvf/set-gtd)
  ;; Font scaling for better readability
  (set-face-attribute 'org-level-1 nil :height 1.5)
  (set-face-attribute 'org-level-2 nil :height 1.3)
  (set-face-attribute 'org-level-3 nil :height 1.2)
  (set-face-attribute 'org-level-4 nil :height 1.1)
  (set-face-attribute 'org-document-title nil :height 1.75)
  :custom
  (org-cite-global-bibliography `(,my-bibliography))
  (org-export-with-tags nil)
  (org-file-apps
   '((auto-mode . emacs)
     ("pdf" . "evince %s")))
  (org-hide-emphasis-markers t)
  (org-latex-compiler "xelatex")
  (org-log-done 'note)
  (org-return-follows-link t)
  (org-src-preserve-indentation t)
  (org-support-shift-select 'always)
  :hook
  (org-mode . turn-on-auto-revert-mode)
  (org-mode . org-cdlatex-mode)
  (org-babel-after-execute . org-redisplay-inline-images))
#+end_src

*** org-fragtog

The [[https://github.com/io12/org-fragtog][org-fragtog]] package enhances the experience of working with LaTeX in Org mode by automatically toggling fragment previews as the cursor moves in and out of them. The default scale is increased for better visibility.

#+begin_src emacs-lisp
(use-package org-fragtog
  :straight t
  :after org
  :custom
  (org-format-latex-header (concat org-format-latex-header "\n\\usepackage{lxfonts}\n\\usepackage{amsmath}"))
  (org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  :init
  (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src

** Completion and Navigation

This section details the modern completion system composed of Vertico, Orderless, Consult, and Embark.

*** Vertico

[[https://github.com/minad/vertico][Vertico]] provides a high-performance, vertical completion UI. It is configured here to use =vertico-multiform-mode=, which enables special keymaps for different types of completion. Specifically, it's set to provide an Ido-like experience for file navigation.

#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :init
  (vertico-mode)
  :config
  ;; This enables per-category configurations for Vertico.
  (vertico-multiform-mode)
  :custom
  ;; This tells vertico-multiform-mode to apply the special
  ;; 'vertico-directory-map' to any completion category of type 'file'.
  (vertico-multiform-categories
   '((file (:keymap . vertico-directory-map)))))
#+end_src

*** Orderless

[[https://github.com/oantolin/orderless][Orderless]] is a completion style that allows matching items by entering multiple patterns in any order. This provides a more flexible and powerful way to filter candidates compared to standard completion.

#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** Consult

[[https://github.com/minad/consult][Consult]] offers a suite of commands that enhance searching and navigation by using the underlying completion system (Vertico). Commands like =consult-line= and =consult-ripgrep= provide an interactive way to find content. A custom function is defined to search within the Org notes directory specifically.

#+begin_src emacs-lisp
(use-package consult
  :straight t
  :bind
  ("<f5> d" . bms/org-roam-rg-search)
  ("<f5> l" . consult-line)
  ("<f5> r" . consult-ripgrep)
  :init
  ;;; https://org-roam.discourse.group/t/using-consult-ripgrep-with-org-roam-for-searching-notes/1226
  (defun bms/org-roam-rg-search ()
    "Search org-roam directory using consult-ripgrep. With live-preview."
    (interactive)
    (let ((consult-ripgrep-command
	   "rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS"))
      (consult-ripgrep my-notes-directory))))
#+end_src

*** Embark

[[https://github.com/oantolin/embark][Embark]] provides contextual actions for the item-at-point or for completion candidates in the minibuffer. It allows you to act on targets (files, buffers, commands, etc.) in a consistent way. =embark-consult= provides enhanced integration between the two packages.

#+begin_src emacs-lisp
(use-package embark
  :straight t
  :bind
  (("C-=" . embark-act)))

(use-package embark-consult
  :straight t
  :after (embark consult)
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Development and AI

*** Magit

[[https://magit.vc][Magit]] is a complete text-based user interface for Git inside Emacs, widely considered one of the best Git clients available.

#+begin_src emacs-lisp
(use-package magit
  :straight t
  :bind ("C-c m" . magit-status))
#+end_src

*** gptel

GPTel provides an interface to Large Language Models (LLMs) directly within Emacs. It's configured to disable extra reasoning in responses to ensure compatibility with extensions like =gptel-magit=.

#+begin_src emacs-lisp
(use-package gptel
  :straight t
  :defer t
  :custom
  (gptel-default-mode 'org-mode)
  (gptel-include-reasoning nil)
  :bind
  ("C-c g" . gptel))
#+end_src

*** gptel-magit

This [[https://github.com/ragnard/gptel-magit][gptel-magit]] package integrates GPTel with Magit, allowing for the automatic generation of Git commit messages based on the staged changes. It is automatically activated whenever Magit is used.

#+begin_src emacs-lisp
(use-package gptel-magit
  :straight t
  :hook (magit-mode . gptel-magit-install))
#+end_src

** Academic and Research

*** Citar

[[https://github.com/emacs-citar/citar][Citar]] is a package for finding and acting on bibliographic references from within Emacs. It integrates with the completion system to make inserting citations, opening notes, and accessing associated files seamless.

#+begin_src emacs-lisp
(use-package citar
  :straight t
  :bind
  ([(f7)] . citar-open)
  ("<f5> b" . citar-insert-bibtex)
  :custom
  (citar-bibliography my-bibliography)
  (citar-library-paths `(,my-library-path))
  (citar-notes-paths `(,my-notes-directory)))
#+end_src
